<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!--配置中央调度器-->
  <!--
      声明注册SpringMVC的核心对象DispatcherServlet
      我们需要在tomcat服务器启动之后，创建DispatcherServlet对象的实列。

      为什么要创建DispatcherServlet对象的实列呢？
      因为DispatcherServlet在他的创建过程中，会同时创建SpringMVC对象，
      读取SpringMVC的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时，
      就可以直接使用对象了。(这个类似于Spring中创建监听器)


      servlet的初始化会执行init()方法。DispatcherServlet在init()中{

        // 读取配置文件，并创建spring容器对象。
        webApplicationContext sc = new ClassPathXmlApplicationContext("applicationContext.xml")

       // 把容器对象放入到ServletContext中
       getServletContext().setAttribute(key,sc)
      }
  -->
  <servlet>
    <!--
      启动报错：读取这个文件 /WEB-INF/SpringMVC-servlet.xml
              这个文件的名字就是 /WEB-INF/</servlet-name>-servlet.xml
              这个文件的路径默认在 /WEB-INF下，我们可以修改这个配置文件的路径
    -->
    <servlet-name>myWeb</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    <!--自定义SpringMVC配置文件的位置-->
    <init-param>
      <!--SpringMVC的配置文件的位置的属性-->
      <param-name>contextConfigLocation</param-name>
      <!--指定自定义配置文件的位置 classpath 代表的还是 target/classes-->
      <param-value>classpath:springmvc.xml</param-value>
    </init-param>
    <!--在tomcat启动之后，创建Servlet对象
      load-on-startup : 表示tomcat启动后创建对象的顺序。
                        它的值是整数，数值越小，tomcat创建这个对象越早
                        他是一个大于等于0的数字，0很少使用。
    -->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>myWeb</servlet-name>
    <!--
        使用框架的时候，url-pattern可以使用两种值
        1.使用扩展名的方式，语法：*.xxx xxx是自定义的扩展名。常用的方式：*.do *.action *.mvc等
          http://localhost:8080/myWeb/some.do
          http://localhost:8080/myWeb/other.do
          使用 *.do 代表的是所有以 .do结尾的请求都交给 myWeb这个Servlet处理

        2.使用斜杠 "/"
    -->
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>
</web-app>
